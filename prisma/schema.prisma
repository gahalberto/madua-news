// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relações
  accounts          Account[]
  sessions          Session[]
  courses           Course[]           @relation("TeacherCourses")
  enrollments       Enrollment[]
  progress          Progress[]
  reviews           Review[]
  posts             Post[]
  comments          Comment[]
  orders            Order[]
  tasks             Task[]             @relation("AssignedTasks")
  createdTasks      Task[]             @relation("TaskCreator")
  projects          Project[]          @relation("ProjectMembers")
  managedProjects   Project[]          @relation("ProjectManager")
  pushSubscriptions PushSubscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo de curso
model Course {
  id               String   @id @default(cuid())
  title            String
  description      String   @db.Text
  slug             String?  @unique
  imageUrl         String?
  price            Float?
  promotionalPrice Float?
  isPublished      Boolean  @default(false)
  categoryId       String?
  teacherId        String
  metaTitle        String?
  metaDescription  String?  @db.Text
  learningPoints   String[] @default([])
  duration         Int?     @default(0)
  hasCertificate   Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relações
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  enrollments Enrollment[]
  reviews     Review[]
}

// Modelo de categoria
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  courses   Course[]
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ebook     Ebook[]
}

// Modelo de capítulo
model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Novos campos para aulas
  duration       Int           @default(0) // Duração em minutos
  contentType    String        @default("VIDEO") // VIDEO, TEXT, QUIZ, etc.
  content        String?       @db.Text // Conteúdo em texto/markdown
  downloadFiles  ChapterFile[]
  youtubeVideoId String? // ID do vídeo do YouTube
  isPreview      Boolean       @default(false) // Se a aula é uma prévia gratuita
  Progress       Progress[]
}

// Novo modelo para arquivos de download
model ChapterFile {
  id          String   @id @default(cuid())
  name        String
  url         String
  size        Int      @default(0) // Tamanho em bytes
  type        String // Tipo de arquivo (pdf, doc, etc.)
  description String?
  chapterId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// Modelo de matrícula
model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Chave única composta
  @@unique([userId, courseId])
}

// Modelo de progresso
model Progress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

// Modelo de avaliação
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

// Modelo de post para o blog
model Post {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  slug            String?          @unique
  imageUrl        String?
  bannerUrl       String? // URL do banner gerado
  featuredImage   String? // Caminho da imagem principal
  categoryId      String?
  metaTitle       String?
  metaDescription String?
  content         String
  excerpt         String?
  published       Boolean          @default(false)
  views           Int              @default(0)
  authorId        String
  keywords        String[]         @default([]) // Palavras-chave para SEO
  author          User             @relation(fields: [authorId], references: [id])
  category        Category?        @relation(fields: [categoryId], references: [id])
  comments        Comment[]
  scrapedArticles ScrapedArticle[]

  @@index([authorId])
  @@index([categoryId])
}

// Modelo de comentário
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// Modelo de produto para e-commerce
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  imageUrl    String?
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  orderItems OrderItem[]
}

// Modelo de Ebook
model Ebook {
  id               String    @id @default(cuid())
  title            String
  description      String    @db.Text
  price            Float
  promotionalPrice Float?
  coverImageUrl    String?
  fileUrl          String // URL para download do arquivo
  pages            Int?
  language         String?
  isbn             String?
  author           String?
  publisher        String?
  publicationDate  DateTime?
  format           String? // PDF, EPUB, MOBI, etc.
  featured         Boolean   @default(false)
  isPublished      Boolean   @default(false)
  categoryId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relações
  category       Category?       @relation(fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  leads          Lead[]          @relation("EbookLeads")
  ebookDownloads EbookDownload[]
}

// Modelo de pedido
model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Float
  paymentId       String? // Para MercadoPago
  paymentIntentId String? // Para Stripe
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relações
  user       User         @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  PaymentLog PaymentLog[]
}

// Modelo de item de pedido
model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  title       String
  productType String // "COURSE" ou "EBOOK"
  orderId     String
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  Ebook   Ebook?  @relation(fields: [ebookId], references: [id])
  ebookId String?
}

// Modelo de tarefa
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  creatorId   String
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relações
  assignee User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator  User     @relation("TaskCreator", fields: [creatorId], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])
}

// Modelo de projeto
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  managerId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  manager User   @relation("ProjectManager", fields: [managerId], references: [id])
  members User[] @relation("ProjectMembers")
  tasks   Task[]
}

// Modelo de Lead (para captura de leads de e-books gratuitos)
model Lead {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  source     String   @default("ebook_download")
  ebookId    String?
  ebookTitle String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relações
  ebook          Ebook?          @relation("EbookLeads", fields: [ebookId], references: [id])
  ebookDownloads EbookDownload[]
}

// Modelo de Download de E-book
model EbookDownload {
  id        String   @id @default(cuid())
  ebookId   String
  leadId    String
  createdAt DateTime @default(now())

  // Relações
  ebook Ebook @relation(fields: [ebookId], references: [id])
  lead  Lead  @relation(fields: [leadId], references: [id])
}

// Modelo para registrar logs de pagamento
model PaymentLog {
  id            String   @id @default(cuid())
  paymentId     String   @unique
  orderId       String
  status        String
  amount        Float
  paymentMethod String?
  paymentType   String?
  userId        String?
  userName      String?
  userEmail     String?
  rawData       String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  order Order? @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Novo modelo para armazenar artigos extraídos
model ScrapedArticle {
  id           String    @id @default(cuid())
  sourceUrl    String
  title        String
  description  String?   @db.Text
  content      String    @db.Text
  rawData      String?   @db.Text // Dados brutos do artigo em formato JSON
  source       String // Fonte do artigo (ex: YNET_NEWS)
  status       String // PENDING, PROCESSING, PROCESSED, ERROR
  errorMessage String?   @db.Text
  createdAt    DateTime  @default(now())
  processedAt  DateTime?
  hashtags     String[]  @default([]) // Armazena as hashtags geradas pela DeepSeek API
  keywords     String[]  @default([]) // Palavras-chave para SEO

  // Referência ao Post após processamento
  postId String?
  post   Post?   @relation(fields: [postId], references: [id])
}

// Modelo para inscritos no Newsletter
model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  type      String // "message", "suggestion", "compliment", "business"
  status    String   @default("pending") // "pending", "read", "replied"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para armazenar assinaturas de notificações push
model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String?
  auth      String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação com o usuário (opcional)
  user User? @relation(fields: [userId], references: [id])
}
